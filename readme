1、数据库问题
\django\db\backends\mysql\base.py文件

将文件中的如下代码注释

if version < (1, 3, 3):
    raise ImproperlyConfigured("mysqlclient 1.3.3 or newer is required; you have %s" % Database.__version__)
2、 File "/Users/chris/Desktop/pycharm-project/FirewallSearch/venv/lib/python3.6/site-packages/django/db/backends/mysql/operations.py", line 146, in last_executed_query
    query = query.decode(errors='replace')
	AttributeError: 'str' object has no attribute 'decode'
	修改operations.py里面的query = query.decode(errors='replace')为 query = query.encode(errors='replace')



select * from `user`;
grant all PRIVILEGES on *.* to 'root'@'%' IDENTIFIED by "*****";
grant all PRIVILEGES on *.* to 'root'@'127.0.0.1' IDENTIFIED by "*****";
flush PRIVILEGES;
create DATABASE firewallsearch;


3、执行数据库
	FirewallSearch python manage.py migrate  生成数据库模型
	python manage.py makemigrations polls    通过运行makemigrations命令，Django 会检测你对模型文件的修改，也就是告诉Django你对模型有改动，并且你想把这些改动保存为一个“迁移(migration)”。
	migrations是Django保存模型修改记录的文件，这些文件保存在磁盘上。在例子中，它就是polls/migrations/0001_initial.py，你可以打开它看看，里面保存的都是人类可读并且可编辑的内容，方便你随时手动修改。

	python manage.py sqlmigrate polls 0001 migrate的命令将对数据库执行真正的迁移动作。但是在此之前，让我们先看看在migration的时候实际执行的SQL语句是什么。有一个叫做sqlmigrate的命令可以展示SQL语句

	python manage.py check命令，它将检查项目中的错误

	python manage.py migrate    ----migrate命令，在数据库中进行真正的表操作了

	在models.py中修改模型；
		运行python manage.py makemigrations为改动创建迁移记录；
		运行python manage.py migrate，将操作同步到数据库。

4、创建后台管理员：
	python manage.py createsuperuser

5、页面设计
	问卷“index”页：显示最新的一些问卷
	问卷“detail”页面：显示一个问卷的详细文本内容，没有调查结果但是有一个投票或调查表单。
	问卷“results”页面：显示某个问卷的投票或调查结果。
	投票动作页面：处理针对某个问卷的某个选项的投票动作。
